apply from: 'constants.gradle'

buildscript {
    repositories {
        google()
        jcenter()
        mavenLocal()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'com.google.gms:google-services:3.1.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()
        mavenCentral()
    }
}

//Skip Javadoc generation for Java 1.8 as it breaks build
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

/**
 * Configure common tasks on all the submodules
 */
allprojects { project ->
    // Get constants, this is where we store things
    // like the list of submodules or the version
    project.apply from: "$rootDir/constants.gradle"

    def isLibrary = 'library'.equals(project.name)
    def isSubmodule = submodules.contains(project.name)

    if (isSubmodule || isLibrary) {
        // So that we can resolve 'android' variable
        project.apply plugin: 'com.android.library'
        project.apply plugin: 'com.github.dcendents.android-maven'
        android {
            compileSdkVersion compileSdk
            buildToolsVersion buildTools
        }

        // Task to generate sources JAR
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.srcDirs
        }

        // Task to generate javadoc
        task javadoc(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            classpath += configurations.compile
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        // Task to generate javadoc JAR
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        // Use tasks above to define artifacts
        artifacts {
            archives javadocJar
            archives sourcesJar
        }
    }
}

allprojects {
    afterEvaluate { project ->
        def isSubmodule = submodules.contains(project.name)

        if (isSubmodule) {
            def pomTask = "generatePomFileFor${project.name.capitalize()}LibraryPublication"
            task prepareArtifacts(dependsOn: [javadocJar, sourcesJar, assembleRelease, pomTask]) {}
        }
    }
}
